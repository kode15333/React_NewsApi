{"version":3,"sources":["components/NewsItem.js","components/NewsList.js","components/Categories.js","App.js","serviceWorker.js","index.js"],"names":["NewsItemBlock","styled","div","props","urlToImage","NewsItem","article","title","description","url","color","className","href","NewsListBlock","NewsList","state","articles","loading","loadData","a","async","setState","category","query","axios","get","response","data","console","error","this","prevProps","prevState","map","key","Component","categories","name","text","CategoriesBlock","Category","li","active","Categories","onSelect","c","onClick","App","handleSelect","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"y1BAGA,IAAMA,EAAgBC,IAAOC,IAAV,KASS,SAAAC,GAAK,OAAIA,EAAMC,cAuC5BC,EAhBE,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACVC,EAAwCD,EAAxCC,MAAOC,EAAiCF,EAAjCE,YAAaC,EAAoBH,EAApBG,IAAKL,EAAeE,EAAfF,WAEjC,OACE,kBAACJ,EAAD,CAAeI,WAAYA,EAAYM,MAAM,QAC1CN,GAAc,yBAAKO,UAAU,cAC9B,yBAAKA,UAAU,YACb,wBAAIA,UAAU,SACZ,uBAAGC,KAAMH,GAAMF,IAEjB,yBAAKI,UAAU,eAAeH,M,yJCxCtC,IAAMK,EAAgBZ,IAAOC,IAAV,KAgEJY,E,2MAzDbC,MAAQ,CACNC,SAAU,KACVC,SAAS,G,EAGXC,SAAW,8BAAAC,EAAAC,OAAA,gEAEP,EAAKC,SAAS,CACZJ,SAAS,IAGHK,EAAa,EAAKnB,MAAlBmB,SACFC,EAAqB,QAAbD,EAAqB,GAArB,oBAAuCA,GAP9C,WAAAH,EAAA,MASgBK,IAAMC,IAAN,yDAC6BF,EAD7B,8CAThB,OASDG,EATC,OAaP,EAAKL,SAAS,CACZL,SAAUU,EAASC,KAAKX,WAdnB,kDAiBPY,QAAQC,MAAR,MAjBO,QAoBT,EAAKR,SAAS,CACZJ,SAAS,IArBF,0D,mFA0BTa,KAAKZ,a,yCAGYa,EAAWC,GACxBD,EAAUT,WAAaQ,KAAK3B,MAAMmB,UACpCQ,KAAKZ,a,+BAIC,IAAD,EACuBY,KAAKf,MAA3BC,EADD,EACCA,SAER,OAHO,EACWC,UAEFD,EACP,kBAACH,EAAD,mBAIP,kBAACA,EAAD,KACGG,EAASiB,KAAI,SAAA3B,GAAO,OACnB,kBAAC,EAAD,CAAU4B,IAAK5B,EAAQG,IAAKH,QAASA,Y,GAnDxB6B,a,6cCRvB,IAAMC,EAAa,CACjB,CACEC,KAAM,MACNC,KAAM,4BAER,CACED,KAAM,WACNC,KAAM,4BAER,CACED,KAAM,gBACNC,KAAM,wCAER,CACED,KAAM,SACNC,KAAM,gBAER,CACED,KAAM,UACNC,KAAM,gBAER,CACED,KAAM,SACNC,KAAM,gBAER,CACED,KAAM,aACNC,KAAM,iBAIJC,EAAkBtC,IAAOC,IAAV,KAafsC,EAAWvC,IAAOwC,GAAV,KAUR,SAAAtC,GAAK,OAAIA,EAAMuC,QAAN,oCAoBAC,EAhBI,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,SAAUtB,EAAe,EAAfA,SAC9B,OACE,kBAACiB,EAAD,KACGH,EAAWH,KAAI,SAAAY,GAAC,OACf,kBAACL,EAAD,CACEN,IAAKW,EAAER,KACPS,QAAS,kBAAMF,EAASC,EAAER,OAC1BK,OAAQpB,IAAauB,EAAER,MAEvB,8BAAOQ,EAAEP,YC5CJS,E,2MArBbhC,MAAQ,CACNO,SAAU,O,EAGZ0B,aAAe,SAAA1B,GACb,EAAKD,SAAS,CACZC,c,wEAIM,IACAA,EAAaQ,KAAKf,MAAlBO,SACR,OACE,6BACE,kBAAC,EAAD,CAAUA,SAAUA,EAAUsB,SAAUd,KAAKkB,eAC7C,kBAAC,EAAD,CAAU1B,SAAUA,S,GAhBVa,aCQEc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a5c43311.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst NewsItemBlock = styled.div`\r\n  margin-bottom: 2rem;\r\n  overflow: hidden;\r\n\r\n  .thumbnail {\r\n    margin-right: 1rem;\r\n    float: left;\r\n    width: 160px;\r\n    height: 100px;\r\n    background-image: url(${props => props.urlToImage});\r\n    background-position: center;\r\n    background-size: cover;\r\n    background-repeat: no-repeat;\r\n  }\r\n\r\n  .contents {\r\n    .title {\r\n      margin-top: 0.5rem;\r\n      margin-bottom: 1rem;\r\n\r\n      a {\r\n        color: inherit;\r\n        text-decoration: none;\r\n      }\r\n    }\r\n\r\n    .description {\r\n      line-height: 1.3;\r\n    }\r\n  }\r\n`;\r\n\r\nconst NewsItem = ({ article }) => {\r\n  const { title, description, url, urlToImage } = article;\r\n\r\n  return (\r\n    <NewsItemBlock urlToImage={urlToImage} color=\"blue\">\r\n      {urlToImage && <div className=\"thumbnail\" />}\r\n      <div className=\"contents\">\r\n        <h3 className=\"title\">\r\n          <a href={url}>{title}</a>\r\n        </h3>\r\n        <div className=\"description\">{description}</div>\r\n      </div>\r\n    </NewsItemBlock>\r\n  );\r\n};\r\n\r\nexport default NewsItem;\r\n","import React, { Component } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport NewsItem from \"./NewsItem\";\r\nimport axios from \"axios\";\r\n\r\nconst NewsListBlock = styled.div`\r\n  padding-bottom: 3rem;\r\n  max-width: 960px;\r\n  margin: 0 auto;\r\n`;\r\n\r\nclass NewsList extends Component {\r\n  state = {\r\n    articles: null,\r\n    loading: false\r\n  };\r\n\r\n  loadData = async () => {\r\n    try {\r\n      this.setState({\r\n        loading: true\r\n      });\r\n\r\n      const { category } = this.props;\r\n      const query = category === \"all\" ? \"\" : `&category=${category}`;\r\n\r\n      const response = await axios.get(\r\n        `https://newsapi.org/v2/top-headlines?country=kr${query}&apiKey=e559a391e668415ba81e581688bdefe4`\r\n      );\r\n\r\n      this.setState({\r\n        articles: response.data.articles\r\n      });\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n\r\n    this.setState({\r\n      loading: false\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.loadData();\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevProps.category !== this.props.category) {\r\n      this.loadData();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { articles, loading } = this.state;\r\n\r\n    if (loading || !articles) {\r\n      return <NewsListBlock>loading...</NewsListBlock>;\r\n    }\r\n\r\n    return (\r\n      <NewsListBlock>\r\n        {articles.map(article => (\r\n          <NewsItem key={article.url} article={article} />\r\n        ))}\r\n      </NewsListBlock>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewsList;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst categories = [\r\n  {\r\n    name: \"all\",\r\n    text: \"전체보기\"\r\n  },\r\n  {\r\n    name: \"business\",\r\n    text: \"비지니스\"\r\n  },\r\n  {\r\n    name: \"entertainment\",\r\n    text: \"엔터테인먼트\"\r\n  },\r\n  {\r\n    name: \"health\",\r\n    text: \"건강\"\r\n  },\r\n  {\r\n    name: \"science\",\r\n    text: \"과학\"\r\n  },\r\n  {\r\n    name: \"sports\",\r\n    text: \"운동\"\r\n  },\r\n  {\r\n    name: \"technology\",\r\n    text: \"기술\"\r\n  }\r\n];\r\n\r\nconst CategoriesBlock = styled.div`\r\n  padding-bottom: 3rem;\r\n  width: 960px;\r\n  margin: 0 auto;\r\n  margin-top: 1rem;\r\n\r\n  ul {\r\n    overflow: hidden;\r\n    padding: 0;\r\n    margin: 0;\r\n  }\r\n`;\r\n\r\nconst Category = styled.li`\r\n  float: left;\r\n  list-style-type: none;\r\n  color: inherit;\r\n  text-decoration: none;\r\n\r\n  span {\r\n    display: block;\r\n    padding: 0.25rem 0.5rem;\r\n\r\n    ${props => props.active && `color: blue; font-weight: bold`}\r\n  }\r\n`;\r\n\r\nconst Categories = ({ onSelect, category }) => {\r\n  return (\r\n    <CategoriesBlock>\r\n      {categories.map(c => (\r\n        <Category\r\n          key={c.name}\r\n          onClick={() => onSelect(c.name)}\r\n          active={category === c.name}\r\n        >\r\n          <span>{c.text}</span>\r\n        </Category>\r\n      ))}\r\n    </CategoriesBlock>\r\n  );\r\n};\r\n\r\nexport default Categories;\r\n","import React, { Component } from \"react\";\r\nimport NewsList from \"./components/NewsList\";\r\nimport Category from \"./components/Categories\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    category: \"all\"\r\n  };\r\n\r\n  handleSelect = category => {\r\n    this.setState({\r\n      category\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { category } = this.state;\r\n    return (\r\n      <div>\r\n        <Category category={category} onSelect={this.handleSelect} />\r\n        <NewsList category={category} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}